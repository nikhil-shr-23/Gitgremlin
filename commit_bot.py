#!/usr/bin/env python3

import os
import random
import time
from datetime import datetime, timedelta
from github import Github
from dotenv import load_dotenv
import schedule
from config import Config

class GitHubCommitBot:
    def __init__(self):
        Config.validate()
        
        self.token = Config.GITHUB_TOKEN
        self.username = Config.GITHUB_USERNAME
        self.repo_name = Config.GITHUB_REPO
        self.repo_owner = Config.REPO_OWNER
        
        self.github = Github(self.token)
        
        try:
            self.repo = self.github.get_repo(f"{self.repo_owner}/{self.repo_name}")
            print(f"✅ Connected to repository: {self.repo.full_name}")
        except Exception as e:
            print(f"❌ Failed to connect to repository: {e}")
            print(f"🔍 Repository: {self.repo_owner}/{self.repo_name}")
            print("💡 Make sure the repository exists and your token has access")
            raise
        
        self.script_dir = os.path.dirname(os.path.abspath(__file__))
        os.chdir(self.script_dir)
    
    def get_random_commit_message(self):
        return random.choice(Config.COMMIT_MESSAGES)
    
    def create_commit(self):
        try:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            random_number = random.randint(1, 1000)
            
            content = f"""# Daily Update - {timestamp}

This is an automated commit to maintain GitHub contribution streak.

## Details:
- Date: {timestamp}
- Random number: {random_number}
- Commit type: Daily maintenance

## Changes:
- Updated contribution data
- Maintained coding streak
- Added progress tracking

Generated by GitHub Commit Bot
"""
            
            filename = f"{Config.CONTRIBUTIONS_DIR}/contribution_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
            
            os.makedirs(Config.CONTRIBUTIONS_DIR, exist_ok=True)
            
            with open(filename, 'w') as f:
                f.write(content)
            
            os.system(f"git add {filename}")
            
            commit_message = self.get_random_commit_message()
            os.system(f'git commit -m "{commit_message}"')
            
            push_result = os.system("git push origin main")
            
            if push_result == 0:
                print(f"✅ Successfully created commit: {commit_message}")
                print(f"📁 File created: {filename}")
                return True
            else:
                print("❌ Failed to push to GitHub")
                return False
                
        except Exception as e:
            print(f"❌ Error creating commit: {str(e)}")
            return False
    
    def check_today_commits(self):
        try:
            today = datetime.now().date()
            
            try:
                commits = list(self.repo.get_commits())
                if not commits:
                    print("📝 Repository is empty, will create first commit")
                    return False
            except Exception:
                print("📝 Repository appears to be empty, will create first commit")
                return False
            
            commits = list(self.repo.get_commits(since=datetime.combine(today, datetime.min.time())))
            
            today_commits = [
                commit for commit in commits 
                if commit.commit.author.date.date() == today
            ]
            
            return len(today_commits) > 0
            
        except Exception as e:
            print(f"⚠️  Could not check today's commits: {str(e)}")
            return False
    
    def run_daily_commit(self):
        print(f"🤖 Starting daily commit process at {datetime.now()}")
        
        if self.check_today_commits():
            print("✅ Already have commits today, skipping...")
            return
        
        success = self.create_commit()
        
        if success:
            print("🎉 Daily commit completed successfully!")
        else:
            print("💥 Daily commit failed!")
    
    def run_immediately(self):
        print("🧪 Running commit immediately for testing...")
        self.create_commit()

def main():
    print("🚀 GitHub Daily Commit Bot Starting...")
    
    try:
        bot = GitHubCommitBot()
        
        if len(os.sys.argv) > 1 and os.sys.argv[1] == "--test":
            bot.run_immediately()
            return
        
        for time_str in Config.COMMIT_TIMES:
            schedule.every().day.at(time_str).do(bot.run_daily_commit)
        
        print("📅 Bot scheduled! Commits will be created at:")
        for time_str in Config.COMMIT_TIMES:
            print(f"   - {time_str}")
        print("\n💡 Run with --test flag to create a commit immediately")
        print("🛑 Press Ctrl+C to stop the bot")
        
        while True:
            schedule.run_pending()
            time.sleep(60)
            
    except KeyboardInterrupt:
        print("\n👋 Bot stopped by user")
    except Exception as e:
        print(f"💥 Bot error: {str(e)}")

if __name__ == "__main__":
    main()
